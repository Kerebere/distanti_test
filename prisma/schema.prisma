//üß©Don't Edit this file.‚ú®Generated in Tue Mar 05 2024 15:38:29 GMT+0500 (–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è)‚ú®
model EmployeeActivationToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("employee_activation_tokens")
}

model UserActivationToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_activation_tokens")
}

model Employee {
  id         String   @id @default(uuid())
  lastName   String
  firstName  String
  middleName String?
  email      String   @unique
  role       String   @default("Admin")
  password   String
  isBlocked  Boolean  @default(false)
  isActive   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  RefreshToken    EmployeeRefreshToken[]
  ActivationToken EmployeeActivationToken[]

  @@map("employees")
}

model Feedback {
  id       String @id @default(uuid())
  fullName String
  phone    String @unique

  @@map("feedbacks")
}

model Group {
  id        String     @id @default(uuid()) @db.Uuid
  name      String     @unique
  iconUrl   String?
  subgroups Subgroup[]

  @@map("groups")
}

model PersonalDataTemplate {
  id          String                   @id @default(uuid()) @db.Uuid
  name        String
  description String
  bioId       String                   @db.Uuid
  fileId      String                   @db.Uuid
  bio         PersonalDataTemplateBio  @relation(fields: [bioId], references: [id])
  file        PersonalDataTemplateFile @relation(fields: [fileId], references: [id])

  @@map("personal_data_templates")
}

model PersonalDataTemplateBio {
  id                   String                 @id @default(uuid()) @db.Uuid
  isFIO                Boolean // –§–ò–û
  isSNILS              Boolean // –°–ù–ò–õ–°
  isEmail              Boolean // –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞
  isOrganizationINN    Boolean // –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  isOrganizationName   Boolean // –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
  isPosition           Boolean // –î–æ–ª–∂–Ω–æ—Å—Ç—å
  PersonalDataTemplate PersonalDataTemplate[]

  @@map("personal_data_template_bio")
}

model PersonalDataTemplateFile {
  id                             String                 @id @default(uuid()) @db.Uuid
  isHigherEducation              Boolean // –í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  isHigherProflEducation         Boolean // –í—ã—Å—à–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–Ω—å–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  isSecondaryEducation           Boolean // –°—Ä–µ–¥–Ω–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  isSecondaryVocationalEducation Boolean // –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
  isInternship                   Boolean // –ò–Ω—Ç–µ—Ä–Ω–∞—Ç—É—Ä–∞
  isResidency                    Boolean // –û—Ä–¥–∏–Ω–∞—Ç—É—Ä–∞
  PersonalDataTemplate           PersonalDataTemplate[]

  @@map("personal_data_template_files")
}

model EmployeeRefreshToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("employee_refresh_tokens")
}

model UserRefreshToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("user_refresh_tokens")
}

model SubgroupBonusPercentage {
  id              String @id @default(uuid()) @db.Uuid
  count           Int
  bonusPercentage Float

  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  subgroupId String

  @@map("subgroup_bonus_percentages")
}

model SubgroupPrice {
  id    String @id @default(uuid()) @db.Uuid
  count Int
  price Float

  subgroup   Subgroup @relation(fields: [subgroupId], references: [id], onDelete: Cascade)
  subgroupId String

  @@map("subgroup_prices")
}

model Subgroup {
  id               String                    @id @default(uuid())
  name             String
  parent           Group                     @relation(fields: [parentId], references: [id], onDelete: Cascade)
  parentId         String                    @db.Uuid
  title            String
  description      String
  exportToFISFRDO  Boolean
  exportToEGIST    Boolean
  prices           SubgroupPrice[]
  bonusPercentages SubgroupBonusPercentage[]

  @@map("subgroups")
}

model TemplateDocument {
  id          String   @id @default(uuid())
  title       String
  description String?
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("template_documents")
}

model User {
  id              String                @id @default(uuid())
  email           String                @unique
  phone           String                @unique
  firstName       String
  lastName        String
  middleName      String?
  password        String
  avatarUrl       String?
  isBlocked       Boolean               @default(false)
  isActive        Boolean               @default(false)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  RefreshToken    UserRefreshToken[]
  ActivationToken UserActivationToken[]

  @@map("users")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PasswordResetEvent {
  id                  String            @id @default(uuid())
  verificationEventId String            @unique
  email               String
  verificationEvent   VerificationEvent @relation(fields: [verificationEventId], references: [id])

  @@map("password_reset_events")
}

model UserActivateEvent {
  id                  String            @id @default(uuid())
  verificationEventId String            @unique
  email               String
  verificationEvent   VerificationEvent @relation(fields: [verificationEventId], references: [id])

  @@map("user_activate_events")
}

model VerificationEvent {
  id        String   @id @default(uuid())
  accessKey String   @unique
  eventType String
  expiresAt DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // –°–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π PasswordResetEvent
  passwordResetEvent PasswordResetEvent?

  // –°–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π UserActivateEvent
  userActivateEvent UserActivateEvent?

  @@map("verification_events")
}
